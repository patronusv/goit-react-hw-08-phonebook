{"version":3,"sources":["pages/ContactsPageStyled.js","components/contactForm/ContactFormStyled.js","components/alert/AlertStyled.js","components/alert/Alert.js","redux/selectors/phonebookSelectors.js","redux/operations/phonebookOperations.js","components/contactForm/ContactForm.js","components/filter/FilterStyled.js","components/filter/Filter.js","components/contactList/contactListItem/ContactListItemStyled.js","components/contactList/contactListItem/ContactListItem.js","components/contactList/ContactListStyled.js","components/contactList/ContactList.js","pages/ContactsPage.js"],"names":["ContactsWrapper","styled","div","FormWrapper","AlertBox","Alert","message","className","getContacts","state","phonebook","contacts","getFilter","filter","getFilteredContacts","createSelector","item","name","toLowerCase","includes","isLoading","loader","axios","defaults","baseURL","process","initialState","number","ContactForm","useSelector","dispatch","useDispatch","useState","setState","alertMessage","setAlertMessage","showAlert","setShowAlert","handleInputChange","e","target","value","prevState","showAlertMessage","setTimeout","CSSTransition","in","timeout","classNames","unmountOnExit","onSubmit","preventDefault","contact","user","some","element","length","a","addContactRequest","post","response","console","log","addContactSuccess","data","addContactError","type","onChange","FilterWrapper","connect","setFilter","ContactLi","li","ContactListItem","classname","onClick","id","dataset","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","operationDeleteContact","data-id","ContactListWrapper","ContactList","useEffect","getContactsRequest","get","Object","keys","map","key","getContactsSuccess","getContactsError","TransitionGroup","component","propTypes","PropTypes","array","string","ContactsPage","loading","color","height","width","appear"],"mappings":"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","file":"static/js/ContactsPage.69d76616.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nconst ContactsWrapper = styled.div`\r\n  padding: 20px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  border: 1px solid navy;\r\n  border-radius: 10px;\r\n  width: 500px;\r\n  margin: 0 auto;\r\n  background-color: #efefef;\r\n  box-shadow: 7px 5px 7px 5px rgba(140, 140, 140, 0.75);\r\n  .page-title {\r\n    margin-bottom: 20px;\r\n  }\r\n  .contacts-title {\r\n    margin-bottom: 10px;\r\n    position: relative;\r\n    z-index: 1;\r\n\r\n    overflow: hidden;\r\n  }\r\n  .loader-wrapper {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n  }\r\n\r\n  .my-title-appear {\r\n    opacity: 0;\r\n    transform: translateX(-100%);\r\n  }\r\n\r\n  .my-title-appear-active {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n    transition: all 500ms;\r\n  }\r\n  .my-title-exit {\r\n    opacity: 1;\r\n  }\r\n  .my-title-exit-active {\r\n    opacity: 0;\r\n    transition: opacity 500ms;\r\n  }\r\n  .my-filter-enter {\r\n    opacity: 0;\r\n    transform: translateY(-50%);\r\n  }\r\n\r\n  .my-filter-enter-active {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n    transition: all 250ms;\r\n  }\r\n  .my-filter-exit {\r\n    opacity: 1;\r\n  }\r\n  .my-filter-exit-active {\r\n    opacity: 0;\r\n    transition: opacity 250ms;\r\n  }\r\n  .my-alert-enter {\r\n    opacity: 0;\r\n    transform: translateX(100%);\r\n  }\r\n\r\n  .my-alert-enter-active {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n    transition: all 250ms;\r\n  }\r\n  .my-alert-exit {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n  .my-alert-exit-active {\r\n    opacity: 0;\r\n    transform: translateX(100%);\r\n    transition: all 250ms;\r\n  }\r\n`;\r\nexport default ContactsWrapper;\r\n","import styled from 'styled-components';\r\nconst FormWrapper = styled.div`\r\n  padding: 20px 0;\r\n  width: 100%;\r\n\r\n  /* margin: 0 auto; */\r\n  background-color: #efefef;\r\n  .form-label {\r\n    font-weight: 700;\r\n    display: block;\r\n    margin-bottom: 10px;\r\n  }\r\n  .form-input {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n  .form-button {\r\n    padding: 5px 15px;\r\n    border: 1px solid navy;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    box-shadow: 1px 1px 7px 0px rgba(140, 140, 140, 0.75);\r\n  }\r\n  .form-button:hover,\r\n  .form-button:focus {\r\n    background-color: yellowgreen;\r\n  }\r\n`;\r\nexport default FormWrapper;\r\n","import styled from 'styled-components';\r\nconst AlertBox = styled.div`\r\n  padding: 15px;\r\n  position: absolute;\r\n  top: 20px;\r\n  right: 40px;\r\n  background-color: tomato;\r\n  max-width: 450px;\r\n\r\n  border-radius: 5px;\r\n  .alertText {\r\n    font-size: 20px;\r\n  }\r\n`;\r\nexport default AlertBox;\r\n","import PropTypes from 'prop-types';\r\nimport AlertBox from './AlertStyled';\r\nconst Alert = ({ message }) => {\r\n  return (\r\n    <AlertBox>\r\n      <p className=\"alertText\">{message}</p>\r\n    </AlertBox>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n\r\nAlert.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nexport const getContacts = state => state.phonebook.contacts;\r\nexport const getFilter = state => state.phonebook.filter;\r\n\r\nexport const getFilteredContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\r\n  return contacts.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\r\n});\r\n\r\nexport const isLoading = state => state.phonebook.loader;\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n} from '../actions/phonebookActions';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL;\r\n\r\nexport const operationAddContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const response = await axios.post(`/contacts`, contact);\r\n    console.log('response', response);\r\n    dispatch(addContactSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const operationGetContacts = () => async dispatch => {\r\n  dispatch(getContactsRequest());\r\n  try {\r\n    const response = await axios.get(`/contacts`);\r\n    if (response.data) {\r\n      const contacts = Object.keys(response.data).map(key => ({\r\n        ...response.data[key],\r\n        id: key,\r\n      }));\r\n\r\n      dispatch(getContactsSuccess(contacts));\r\n    } else dispatch(getContactsSuccess([]));\r\n  } catch (error) {\r\n    dispatch(getContactsError(error));\r\n  }\r\n};\r\n\r\nexport const operationDeleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport FormWrapper from './ContactFormStyled';\r\nimport Alert from '../alert/Alert';\r\nimport { getContacts } from '../../redux/selectors/phonebookSelectors';\r\nimport { operationAddContact } from '../../redux/operations/phonebookOperations';\r\nconst initialState = {\r\n  name: '',\r\n  number: '',\r\n};\r\nconst ContactForm = () => {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n  const [state, setState] = useState({ ...initialState });\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.target;\r\n    setState(prevState => ({ ...prevState, [name]: value }));\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const user = { name: state.name, number: state.number };\r\n    if (contacts.some(element => element.name === user.name)) {\r\n      showAlertMessage(`${user.name} is already in contacts`);\r\n      return;\r\n    }\r\n    if (!user.name.length) {\r\n      showAlertMessage('Please enter a name');\r\n      return;\r\n    }\r\n    if (!user.number.length) {\r\n      showAlertMessage('Please enter a number');\r\n      return;\r\n    }\r\n\r\n    dispatch(operationAddContact(user));\r\n    setState({ ...initialState });\r\n  };\r\n  const showAlertMessage = message => {\r\n    setAlertMessage(message);\r\n    setShowAlert(true);\r\n    setTimeout(() => {\r\n      setShowAlert(false);\r\n    }, 3000);\r\n    setTimeout(() => {\r\n      setAlertMessage('');\r\n    }, 3250);\r\n  };\r\n  const { name, number } = state;\r\n  return (\r\n    <FormWrapper>\r\n      <CSSTransition in={showAlert} timeout={250} classNames=\"my-alert\" unmountOnExit>\r\n        <Alert message={alertMessage} />\r\n      </CSSTransition>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className=\"form-label\">\r\n          Name\r\n          <input className=\"form-input\" type=\"text\" name=\"name\" value={name} onChange={handleInputChange} />\r\n        </label>\r\n        <label className=\"form-label\">\r\n          Number\r\n          <input className=\"form-input\" type=\"text\" name=\"number\" value={number} onChange={handleInputChange} />\r\n        </label>\r\n        <button className=\"form-button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// ContactForm.propTypes = {\r\n//   addNewContact: PropTypes.func.isRequired,\r\n// };\r\n","import styled from 'styled-components';\r\nconst FilterWrapper = styled.div`\r\n  width: 100%;\r\n  padding: 20px 0;\r\n  .filter-label {\r\n    font-weight: 700;\r\n    display: block;\r\n  }\r\n  .filter-input {\r\n    display: block;\r\n    width: 100%;\r\n  }\r\n`;\r\nexport default FilterWrapper;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { setFilter } from '../../redux/actions/phonebookActions';\r\nimport FilterWrapper from './FilterStyled';\r\nconst Filter = ({ setFilter, filter }) => {\r\n  const onHandleChange = e => {\r\n    const { value } = e.target;\r\n    setFilter(value);\r\n  };\r\n  return (\r\n    <FilterWrapper>\r\n      <label className=\"filter-label\">\r\n        Search by name\r\n        <input className=\"filter-input\" type=\"text\" name=\"filter\" value={filter} onChange={onHandleChange} />\r\n      </label>\r\n    </FilterWrapper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.phonebook.filter,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setFilter: value => {\r\n      dispatch(setFilter(value));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\nFilter.propTypes = {\r\n  setFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\n","import styled from 'styled-components';\r\nconst ContactLi = styled.li`\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 5px 15px;\r\n  border: 1px solid navy;\r\n  border-radius: 5px;\r\n  box-shadow: 1px 1px 7px 0px rgba(140, 140, 140, 0.75);\r\n  .contact-list-name {\r\n    font-weight: 700;\r\n    margin-right: 5px;\r\n  }\r\n  .contact-list-number {\r\n    margin-right: 10px;\r\n  }\r\n  .contact-list-button {\r\n    padding: 5px 15px;\r\n    border: 1px solid navy;\r\n    border-radius: 5px;\r\n    background-color: lightblue;\r\n    box-shadow: 1px 1px 7px 0px rgba(140, 140, 140, 0.75);\r\n  }\r\n  .contact-list-button:hover,\r\n  .contact-list-button:focus {\r\n    background-color: yellowgreen;\r\n  }\r\n`;\r\nexport default ContactLi;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ContactLi from './ContactListItemStyled';\r\nimport { getFilter, getFilteredContacts } from '../../../redux/selectors/phonebookSelectors';\r\nimport { setFilter } from '../../../redux/actions/phonebookActions';\r\nimport { operationDeleteContact } from '../../../redux/operations/phonebookOperations';\r\nconst ContactListItem = ({ item }) => {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onHandleDelete = e => {\r\n    const id = e.target.dataset.id;\r\n    dispatch(operationDeleteContact(id));\r\n\r\n    if (contacts.filter(item => item.name.toLowerCase().includes(filter.toLowerCase())).length < 2) {\r\n      dispatch(setFilter(''));\r\n    }\r\n  };\r\n  return (\r\n    <ContactLi classname=\"contact-list-item\" key={item.id}>\r\n      <span className=\"contact-list-name\">{item.name}: </span>\r\n      <span className=\"contact-list-number\">{item.number}</span>\r\n      <button className=\"contact-list-button\" type=\"button\" onClick={onHandleDelete} data-id={item.id}>\r\n        Delete contact\r\n      </button>\r\n    </ContactLi>\r\n  );\r\n};\r\n\r\nexport default ContactListItem;\r\nContactListItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n","import styled from 'styled-components';\r\nconst ContactListWrapper = styled.div`\r\n  padding: 10px 0;\r\n  li:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  .my-list-item-enter {\r\n    opacity: 0;\r\n    transform: translateX(-100%);\r\n  }\r\n\r\n  .my-list-item-enter-active {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n    transition: all 250ms;\r\n  }\r\n  .my-list-item-exit {\r\n    opacity: 1;\r\n    transform: translateX(0);\r\n  }\r\n  .my-list-item-exit-active {\r\n    opacity: 0;\r\n    transform: translateX(-100%);\r\n    transition: all 250ms;\r\n  }\r\n`;\r\nexport default ContactListWrapper;\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ContactListItem from './contactListItem/ContactListItem';\r\nimport ContactListWrapper from './ContactListStyled';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { getFilter, getFilteredContacts } from '../../redux/selectors/phonebookSelectors';\r\nimport { operationGetContacts } from '../../redux/operations/phonebookOperations';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(operationGetContacts());\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  return (\r\n    <ContactListWrapper>\r\n      <TransitionGroup component=\"ul\" className=\"list\">\r\n        {contacts\r\n          .filter(item => item.name.toLowerCase().includes(filter.toLowerCase()))\r\n          .map(item => (\r\n            <CSSTransition key={item.id} timeout={250} classNames=\"my-list-item\">\r\n              <ContactListItem item={item} />\r\n            </CSSTransition>\r\n          ))}\r\n      </TransitionGroup>\r\n    </ContactListWrapper>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\nContactListItem.propTypes = {\r\n  contacts: PropTypes.array,\r\n  filter: PropTypes.string,\r\n};\r\n","import { CSSTransition } from 'react-transition-group';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\nimport ContactsWrapper from './ContactsPageStyled';\r\nimport ContactForm from '../components/contactForm/ContactForm';\r\nimport Filter from '../components/filter/Filter';\r\nimport ContactList from '../components/contactList/ContactList';\r\nimport { useSelector } from 'react-redux';\r\nimport { getContacts, isLoading } from '../redux/selectors/phonebookSelectors';\r\n\r\nconst ContactsPage = () => {\r\n  const contacts = useSelector(getContacts);\r\n  const loading = useSelector(isLoading);\r\n  return (\r\n    <ContactsWrapper>\r\n      {loading && (\r\n        <div className=\"loader-wrapper\">\r\n          <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={100} width={100} timeout={3000} />\r\n        </div>\r\n      )}\r\n      <CSSTransition in={true} appear={true} timeout={500} classNames=\"my-title\" unmountOnExit>\r\n        <h1 className=\"page-title\">Phonebook</h1>\r\n      </CSSTransition>\r\n\r\n      <ContactForm />\r\n\r\n      <h2 className=\"contacts-title\">Contacts</h2>\r\n      <CSSTransition in={contacts.length > 1} timeout={250} classNames=\"my-filter\" unmountOnExit>\r\n        <Filter />\r\n      </CSSTransition>\r\n\r\n      <ContactList />\r\n    </ContactsWrapper>\r\n  );\r\n};\r\n\r\nexport default ContactsPage;\r\n"],"sourceRoot":""}